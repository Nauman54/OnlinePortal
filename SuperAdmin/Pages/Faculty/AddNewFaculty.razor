@page "/facl/addnewfacl"
@page "/facl/addnewfacl/{FaclID}"
@using ClassLibraryModel
@using ClassLibraryDAL
@inject NavigationManager nm
@attribute [Authorize(Roles = "Administrator")]

<h3>AddNewFaculty</h3>

<style>
	#imgLogo {
		width: 90px;
		height: 90px;
	}
</style>

<br />
<EditForm Model="faclModel" OnSubmit="SaveFacl">
	<br />
	<label>First Name</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclFirstName" placeholder="Enter First Name" />
	<br />
	<br />
	<label>Last Name</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclLastName" placeholder="Enter Last Name" />
	<br />
	<br />
	<label>Gender</label>
	<br />
	<select class="form-control-sm" @onchange="GetGender">
		<option value="0">--Select Gender--</option>
		@foreach (var item in genModels)
		{
			<option value="@item.GenderID">@item.GenderName</option>
		}
	</select>
	<br />
	<br />
	<label>CNIC</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclCNIC" placeholder="Enter CNIC" />
	<br />
	<br />
	<label>Phone Number</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclPhoneNo" placeholder="Enter Phone No" />
	<br />
	<br />
	<label>Email</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclEmail" placeholder="Enter Email" />
	<br />
	<br />
	<label>Country</label>
	<br />
	<select class="form-control-sm" @onchange="GetCountry">
		<option value="0">--Select Country--</option>
		@foreach (var item in ctryModels)
		{
			<option value="@item.CountryID">@item.CountryName</option>
		}
	</select>
	<br />
	<br />
	<label>City</label>
	<br />
	<select class="form-control-sm" @onchange="GetCity">
		<option value="0">--Select City--</option>
		@foreach (var item in ctyModels)
		{
			<option value="@item.CityID">@item.CityName</option>
		}
	</select>
	<br />
	<br />
	<label>Address</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclAddress" placeholder="Enter Address" />
	<br />
	<br />
	<label>Last Job</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclLastJob" placeholder="Enter Last Job" />
	<br />
	<br />
	<label>Experience</label>
	<br />
	<input type="text" @bind-value="faclModel.FaclExperience" placeholder="Enter Experience" />
	<br />
	<br />
	<label>Position</label>
	<br />
	<select class="form-control-sm" @onchange="GetPositions">
		<option value="0">--Select Position--</option>
		@foreach (var item in posModels)
		{
			<option value="@item.PosID">@item.PosTitle</option>
		}
	</select>
	<br />
	<br />
	<label>Qualification</label>
	<br />
	<select class="form-control-sm" @onchange="GetQualifications">
		<option value="0">--Select Qualification--</option>
		@foreach (var item in qualModels)
		{
		<option value="@item.QualID">@item.QualTitle</option>
		}
	</select>
	<br />
	<br />
	<label>Organization</label>
	<br />
	<select class="form-control-sm" @onchange="GetOrganizations">
		<option value="0">--Select Organization--</option>
		@foreach (var item in orgModels)
		{
			<option value="@item.OrgID">@item.OrgName</option>
		}
	</select>
	<br />
	<br />
	<label>Department</label>
	<br />
	<select class="form-control-sm" @onchange="GetDepartments">
		<option value="0">--Select Department--</option>
		@foreach (var item in deptModels)
		{
			<option value="@item.DeptID">@item.DeptName</option>
		}
	</select>
	<br />
	<br />
	<label>Image</label>
	<br />
	@if (imageUrl != null)
	{
		<img id="imgLogo" src="@imageUrl" />
	}
	<InputFile OnChange="HandleFileSelect"></InputFile>
	<br />
	<br />
	<div class="form-group">
		<label>Is Active?</label>
		<div class="form-check">
			<input class="form-check-input" type="radio" value="true" checked="@faclModel.FaclIsActive" @onchange="e => faclModel.FaclIsActive = true" />
			<label class="form-check-label">Yes</label>
		</div>
		<div class="form-check">
			<input class="form-check-input" type="radio" value="false" checked="@(!faclModel.FaclIsActive)" @onchange="e => faclModel.FaclIsActive = false" />
			<label class="form-check-label">No</label>
		</div>
	</div>
	<br />
	<br />

	<button type="submit" class="btn btn-outline-primary btn-sm">@ButtonName</button>
	<br />
</EditForm>

@code {

	[Parameter]
	public string? FaclID { get; set; }

	public string? ButtonName { get; set; }
	public string? imageUrl { get; set; }
	public byte[]? buffer { get; set; }

	private List<FaclModel>? faclData { get; set; }
	private FaclModel faclModel { get; set; } = new FaclModel();

	private List<GenderModel> genModels { get; set; } = new List<GenderModel>();
	private int gender { get; set; }

	private List<CountryModel> ctryModels { get; set; } = new List<CountryModel>();
	private int country { get; set; }

	private List<CityModel> ctyModels { get; set; } = new List<CityModel>();
	private int city { get; set; }

	private List<PosModel> posModels { get; set; } = new List<PosModel>();
	private int position { get; set; }

	private List<ExpModel> expModels { get; set; } = new List<ExpModel>();
	private int expertise { get; set; }

	private List<QualModel> qualModels { get; set; } = new List<QualModel>();
	private int qualification { get; set; }

	private List<DeptModel> deptModels { get; set; } = new List<DeptModel>();
	private int department { get; set; }

	private List<OrgModel> orgModels { get; set; } = new List<OrgModel>();
	private int organization { get; set; }

	protected override void OnInitialized()
	{
		LoadGender();
		LoadCountry();
		LoadCity();
		LoadPostions();
		LoadQualifications();
		LoadOrganizations();
		LoadDepartments();

		if (!string.IsNullOrEmpty(FaclID))
		{
			ButtonName = "Edit";
			GetData();
			foreach (var item in faclData)
			{
				faclModel.FaclID = item.FaclID;
				faclModel.FaclFirstName = item.FaclFirstName;
				faclModel.FaclLastName = item.FaclLastName;
				faclModel.GenderID = item.GenderID;
				faclModel.FaclCNIC = item.FaclCNIC;
				faclModel.FaclPhoneNo = item.FaclPhoneNo;
				faclModel.FaclEmail = item.FaclEmail;
				faclModel.CountryID = item.CountryID;
				faclModel.CityID = item.CityID;
				faclModel.FaclAddress = item.FaclAddress;
				faclModel.FaclLastJob = item.FaclLastJob;
				faclModel.FaclExperience = item.FaclExperience;
				faclModel.PosID = item.PosID;
				faclModel.QualID = item.QualID;
				faclModel.OrgID = item.OrgID;
				faclModel.DeptID = item.DeptID;
				faclModel.FaclImage = item.FaclImage;
				faclModel.FaclIsActive = item.FaclIsActive;
				imageUrl = item.FaclImage;
			}
		}
		else
		{
			ButtonName = "Save";
		}
	}

	private void GetGender(ChangeEventArgs e)
	{
		gender = int.Parse(e.Value.ToString());
	}

	private void LoadGender()
	{
		genModels = GenderDAL.GetGender();
	}

	private void GetCountry(ChangeEventArgs e)
	{
		country = int.Parse(e.Value.ToString());
	}

	private void LoadCountry()
	{
		ctryModels = CountryDAL.GetCountry();
	}

	private void GetCity(ChangeEventArgs e)
	{
		city = int.Parse(e.Value.ToString());
	}

	private void LoadCity()
	{
		ctyModels = CityDAL.GetCity();
	}

	private void GetPositions(ChangeEventArgs e)
	{
		position = int.Parse(e.Value.ToString());
	}

	private void LoadPostions()
	{
		posModels = PosDAL.GetPos();
	}

	private void GetExpertise(ChangeEventArgs e)
	{
		expertise = int.Parse(e.Value.ToString());
	}

	private void LoadExpertise()
	{
		expModels = ExpDAL.GetExp();
	}

	private void GetQualifications(ChangeEventArgs e)
	{
		qualification = int.Parse(e.Value.ToString());
	}

	private void LoadQualifications()
	{
		qualModels = QualDAL.GetQual();
	}

	private void GetOrganizations(ChangeEventArgs e)
	{
		organization = int.Parse(e.Value.ToString());
		LoadDepartments();
	}

	private void LoadOrganizations()
	{
		orgModels = OrgDAL.GetOrg();
	}

	private void GetDepartments(ChangeEventArgs e)
	{
		department = int.Parse(e.Value.ToString());
	}

	private void LoadDepartments()
	{
		deptModels = DeptDAL.GetDeptByOrg(organization);
	}

	private void SaveFacl()
	{
		if (ButtonName == "Save")
		{
			if (position > 0 && expertise > 0 && qualification > 0 && department > 0 && organization > 0)
			{
				faclModel.GenderID = gender;
				faclModel.CountryID = country;
				faclModel.CityID = city;
				faclModel.PosID = position;
				faclModel.QualID = qualification;
				faclModel.OrgID = organization;
				faclModel.DeptID = department;
				faclModel.FaclImage = imageUrl;
				if (FaclDAL.SaveFacl(faclModel) == 1)
				{
					nm.NavigateTo("facl/faculty");
				}
			}
		}
		else
		{
			if (position > 0 && expertise > 0 && qualification > 0 && department > 0 && organization > 0)
			{
				faclModel.FaclID = int.Parse(FaclID);
				faclModel.GenderID = gender;
				faclModel.CountryID = country;
				faclModel.CityID = city;
				faclModel.PosID = position;
				faclModel.QualID = qualification;
				faclModel.OrgID = organization;
				faclModel.DeptID = department;
				faclModel.FaclImage = imageUrl;
				if (FaclDAL.EditFacl(faclModel) == 1)
				{
					nm.NavigateTo("facl/faculty");
				}
			}
		}
	}

	private void GetData()
	{
		faclData = FaclDAL.GetFaclByID(int.Parse(FaclID));
	}

	private async Task HandleFileSelect(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null)
		{
			using var stream = file.OpenReadStream();
			buffer = new byte[file.Size];
			await stream.ReadAsync(buffer, 0, (int)file.Size);

			imageUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
			faclModel.FaclImage = imageUrl;
		}
	}
}
